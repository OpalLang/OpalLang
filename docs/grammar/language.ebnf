/* EBNF Grammar for the Opal Language */

program = { class_declaration | function_declaration | comment | statement } ;

/* Comments */
comment = single_line_comment | multi_line_comment ;
single_line_comment = "//", { any_character - newline }, newline ;
multi_line_comment = "/*", { any_character - "*/" }, "*/" ;

/* Class declarations */
class_declaration = "class", identifier, "{", { class_member }, "}" ;
class_member = method_declaration | property_declaration ;
method_declaration = "fn", identifier, "(", [ parameter_list ], ")", block ;
property_declaration = identifier, [ "=", expression ] ;

/* Function declarations */
function_declaration = "fn", identifier, "(", [ parameter_list ], ")", block ;
parameter_list = parameter, { ",", parameter } ;
parameter = identifier, [ "=", expression ] ;

/* Blocks and statements */
block = "{", { statement }, "}" ;
statement = assignment
          | if_statement
          | while_statement
          | for_statement
          | traditional_for_statement
          | foreach_statement
          | function_call
          | return_statement
          | try_catch_statement
          | increment_statement
          | switch_statement
          | enum_declaration
          | break_statement
          | continue_statement
          | expression ;

/* Declarations and assignments */
assignment = identifier, assignment_operator, expression ;
assignment_operator = "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "#=" | "<<=" | ">>=" ;
increment_statement = identifier, ("++" | "--") ;

/* Control flow statements */
if_statement = "if", expression, block, { "elif", expression, block }, [ "else", block ] ;
while_statement = "while", expression, block ;
for_statement = "for", identifier, "in", range_expression, block ;
traditional_for_statement = "for", assignment, ";", expression, ";", (assignment | increment_statement), block ;
foreach_statement = "foreach", identifier, "in", expression, block ;
return_statement = "ret", expression ;
try_catch_statement = "try", block, "catch", "(", identifier, ")", block, [ "finally", block ] ;
switch_statement = "switch", expression, "{", { case_clause }, [ default_clause ], "}" ;
case_clause = "case", expression, ":", { statement } ;
default_clause = "default", ":", { statement } ;
break_statement = "break" ;
continue_statement = "continue" ;

/* Enum declaration */
enum_declaration = "enum", identifier, "{", enum_member_list, "}" ;
enum_member_list = identifier, { ",", identifier }, [ "," ] ;

/* Range expression */
range_expression = expression, "..", expression, [ "step", expression ] ;

/* Expressions */
expression = logical_expression ;
logical_expression = comparison_expression, { logical_operator, comparison_expression } ;
logical_operator = "&&" | "||" | "and" | "or" ;
comparison_expression = bitwise_expression, { comparison_operator, bitwise_expression } ;
comparison_operator = "==" | "!=" | ">" | "<" | ">=" | "<=" | "is" | "is not" ;
bitwise_expression = shift_expression, { bitwise_operator, shift_expression } ;
bitwise_operator = "&" | "|" | "#" | "~" ;
shift_expression = additive_expression, { shift_operator, additive_expression } ;
shift_operator = "<<" | ">>" ;
additive_expression = multiplicative_expression, { additive_operator, multiplicative_expression } ;
additive_operator = "+" | "-" ;
multiplicative_expression = unary_expression, { multiplicative_operator, unary_expression } ;
multiplicative_operator = "*" | "/" | "%" ;
unary_expression = unary_operator, unary_expression | power_expression ;
unary_operator = "!" | "-" | "not" | "~" ;
power_expression = primary_expression, { "^", primary_expression } ;
primary_expression = literal
                  | identifier
                  | function_call
                  | method_call
                  | array_expression
                  | "(", expression, ")"
                  | "this"
                  | string_interpolation
                  | increment_expression ;

/* Increment expression */
increment_expression = identifier, ("++" | "--") ;

/* Array operations */
array_expression = "[", [ expression_list ], "]" ;
expression_list = expression, { ",", expression } ;

/* String interpolation */
string_interpolation = '"', { string_content | interpolated_expression }, '"' ;
string_content = any_character - ('"' | "${") ;
interpolated_expression = "${", expression, "}" ;

/* Calls */
function_call = identifier, "(", [ argument_list ], ")" ;
method_call = primary_expression, ".", identifier, "(", [ argument_list ], ")" ;
argument_list = named_argument | positional_argument, { ",", (named_argument | positional_argument) } ;
named_argument = identifier, ":", expression ;
positional_argument = expression ;

/* Basic elements */
identifier = letter, { letter | digit | "_" } ;
literal = number | string | boolean | "nil" | array_literal ;
number = integer | float ;
integer = [ "-" ], digit, { digit } ;
float = [ "-" ], digit, { digit }, ".", { digit } ;
string = '"', { any_character - '"' }, '"' ;
boolean = "true" | "false" ;
array_literal = "[", [ expression_list ], "]" ;

/* Base characters */
letter = "A" | "B" | "C" | ... | "Z" | "a" | "b" | "c" | ... | "z" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
any_character = ? any Unicode character ? ;
newline = ? newline character ? ;
