// Fibonacci sequence example in Opal
// Demonstrates both recursive and iterative approaches

// Recursive implementation of Fibonacci
fn fibonacci_recursive(n) {
    if n <= 0 {
        ret 0
    } elif n == 1 {
        ret 1
    } else {
        ret fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)
    }
}

// Iterative implementation of Fibonacci (more efficient)
fn fibonacci_iterative(n) {
    if n <= 0 {
        ret 0
    }
    
    if n == 1 {
        ret 1
    }
    
    a = 0
    b = 1
    result = 0
    
    for i = 2; i <= n; i++ {
        result = a + b
        a = b
        b = result
    }
    
    ret result
}

fn main() {
    print("Fibonacci Sequence Calculator")
    print("-----------------------------")
    
    n = input("Enter a number to calculate its Fibonacci value: ")
    
    // Validate input
    if n < 0 {
        print("Please enter a non-negative number.")
        ret
    }
    
    // Calculate and display results
    print("\nResults:")
    print("Recursive method: fibonacci(${n}) = ${fibonacci_recursive(n)}")
    print("Iterative method: fibonacci(${n}) = ${fibonacci_iterative(n)}")
    
    // Display the first n+1 Fibonacci numbers
    print("\nFibonacci sequence up to ${n}:")
    for i = 0; i <= n; i++ {
        print("fibonacci(${i}) = ${fibonacci_iterative(i)}")
    }
    
    // Performance note
    if n > 30 {
        print("\nNote: The recursive method becomes very slow for large numbers")
        print("due to repeated calculations. The iterative method is more efficient.")
    }
} 